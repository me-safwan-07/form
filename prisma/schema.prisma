generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Person {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String      @db.ObjectId
  responses     Response[]
  displays      Display[]

  @@unique([environmentId, userId])
  @@index([environmentId])
}

model Response {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime         @default(now()) @map(name: "created_at")
  updatedAt  DateTime         @updatedAt @map(name: "updated_at")
  finished   Boolean          @default(false)
  form       Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId     String           @db.ObjectId
  person     Person?          @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId   String?          @db.ObjectId
  notes      ResponseNote[]
  /// @zod.custom(imports.ZResponseData)
  /// [ResponseData]
  data       Json             @default("{}")
  /// @zod.custom(imports.ZResponseMeta)
  /// [ResponseMeta]
  meta       Json             @default("{}")
  tags       TagsOnResponses[]
}

model ResponseNote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  text       String
  isResolved Boolean  @default(false)
  isEdited   Boolean  @default(false)

  @@index([responseId])
}

model Tag {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime          @default(now()) @map(name: "created_at")
  updatedAt     DateTime          @updatedAt @map(name: "updated_at")
  name          String
  responses     TagsOnResponses[]
  environmentId String            @db.ObjectId
  environment   Environment       @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([environmentId, name])
  @@index([environmentId])
}

model TagsOnResponses {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  responseId String   @db.ObjectId
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  tagId      String   @db.ObjectId
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([responseId, tagId])
  @@index([responseId])
}

enum FormStatus {
  draft
  scheduled
  inProgress
  paused
  completed
}

enum DisplayStatus {
  seen
  responded
}

model Display {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  form          Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId        String      @db.ObjectId
  person        Person?     @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId      String?     @db.ObjectId
  responseId    String?     @unique
  status        DisplayStatus?

  @@index([formId])
  @@index([personId, createdAt])
}

enum displayOptions {
  displayOnce
  displayMultiple
  displaySome
  respondMultiple
}

model Form {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime     @default(now()) @map(name: "created_at")
  updatedAt           DateTime     @updatedAt @map(name: "updated_at")
  name                String
  redirectUrl         String?
  environment         Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId       String       @db.ObjectId
  creator             User?        @relation(fields: [createdBy], references: [id])
  createdBy           String?      @db.ObjectId
  status              FormStatus   @default(draft)
  /// @zod.custom(imports.ZFormWelcomeCard)
  /// [FormWelcomeCard]
  welcomeCard         Json         @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZFormQuestions)
  /// [FormQuestions]
  questions           Json         @default("[]")
  /// @zod.custom(imports.ZFormThankYouCard)
  /// [FormThankYouCard]
  thankYouCard        Json         @default("{\"enabled\": false}")
  responses           Response[]
  displayOption       displayOptions          @default(displayOnce)
  recontactDays       Int?
  displayLimit        Int?
  displays            Display[]
  autoClose           Int?
  autoComplete        Int?
  delay               Int          @default(0)
  runOnDate           DateTime?
  closeOnDate         DateTime?
  /// @zod.custom(imports.ZSurveyClosedMessage)
  /// [SurveyClosedMessage]
  surveyClosedMessage Json?
  
  /// @zod.custom(imports.ZFormProductOverwrites)
  /// [FormProductOverwrites]
  productOverwrites Json?

  styling             Json?
  verifyEmail         Json?
  pin                 String?
  resultShareKey      String?      @unique
  displayPercentage   Float?

  @@index([environmentId, updatedAt])
}

model Environment {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  product       Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String       @db.ObjectId
  forms         Form[]
  people        Person[]
  tags          Tag[]
}

model Product {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime      @default(now()) @map(name: "created_at")
  updatedAt            DateTime      @updatedAt @map(name: "updated_at")
  name                 String
  organization         Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId       String        @db.ObjectId
  environments         Environment[]
  brandColor           String? // deprecated; use styling.brandColor instead
  highlightBorderColor String? // deprecated
  /// @zod.custom(imports.ZProductStyling)
  /// [Styling]
  styling              Json        @default("{\"allowStyleOverwrite\":true}")
  recontactDays        Int             @default(7)
  darkOverlay          Boolean     @default(false)
  logo                 Json?
}

model Organization {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")
  name        String
  memberships Membership[]
  products    Product[]
  /// @zod.custom(imports.ZTeamBilling)
  /// [TeamBilling]
  billing     Json
  invites     Invite[]
}

enum MembershipRole {
  owner
  admin
  editor
  developer
  viewer
}


model Membership {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String         @db.ObjectId
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.ObjectId
  accepted       Boolean        @default(false)
  role           MembershipRole
}

model Invite {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  email          String
  name           String?
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String         @db.ObjectId
  creator        User           @relation("inviteCreatedBy", fields: [creatorId], references: [id])
  creatorId      String         @db.ObjectId
  acceptor       User?          @relation("inviteAcceptedBy", fields: [acceptorId], references: [id], onDelete: Cascade)
  acceptorId     String?        @db.ObjectId
  accepted       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  expiresAt      DateTime
  role           MembershipRole @default(admin)

  @@index([email, organizationId])
  @@index([organizationId])
}

enum IdentityProvider {
  email
  google
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.String
  refresh_token     String?  @db.String
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Role {
  project_manager
  engineer
  founder
  marketing_specialist
  other
}

enum Objective {
  increase_conversion
  improve_user_retention
  increase_user_adoption
  sharpen_marketing_messaging
  support_sales
  other
}

model User {
  id                        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  name                      String
  email                     String           @unique
  emailVerified             DateTime?        @map(name: "email_verified")
  imageUrl                  String?
  password                  String?
  identityProvider          IdentityProvider @default(email)
  identityProviderAccountId String?
  memberships               Membership[]
  accounts                  Account[]
  responseNotes             ResponseNote[]
  groupId                   String?
  invitesCreated            Invite[]         @relation("inviteCreatedBy")
  invitesAccepted           Invite[]         @relation("inviteAcceptedBy")
  role                      Role?
  objective                 Objective?
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// [UserNotificationSettings]
  notificationSettings      Json             @default("{}")
  forms                     Form[]
}

model ShortUrl {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  url       String   @unique
}