// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum IdentityProvider {
  email
  google
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.String
  refresh_token     String?  @db.String
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  name                      String
  email                     String           @unique
  emailVerified             DateTime?        @map(name: "email_verified")
  imageUrl                  String?
  password                  String?
  identityProvider          IdentityProvider @default(email)
  identityProviderAccountId String?
  accounts                  Account[]
  memberships               Membership[]
  invitesCreated            Invite[]         @relation("inviteCreatedBy")
  invitesAccepted           Invite[]         @relation("inviteAcceptedBy")
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// [UserNotificationSettings]
  notificationSettings      Json             @default("{}")
  forms                     Form[]
}

model Environment {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime         @default(now()) @map(name: "created_at")
  updatedAt             DateTime         @updatedAt @map(name: "updated_at")
  product               Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             String           @db.ObjectId
  forms                 Form[]
}

model Product {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime        @default(now()) @map(name: "created_at")
  updatedAt            DateTime        @updatedAt @map(name: "updated_at")
  name                 String
  organization         Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId       String          @db.ObjectId
  environments         Environment[]
  brandColor           String? // deprecated; use styling.brandColor instead
  highlightBorderColor String? // deprecated
  /// @zod.custom(imports.ZProductStyling)
  /// [Styling]
  styling              Json            @default("{\"allowStyleOverwrite\":true}")
  /// @zod.custom(imports.ZProductConfig)
  /// [ProductConfig]
  // config               Json            @default("{}")
  // recontactDays        Int             @default(7)
  // clickOutsideClose    Boolean         @default(true)
  darkOverlay          Boolean         @default(false)
  /// @zod.custom(imports.ZLogo)
  /// [Logo]
  logo                 Json?

  @@unique([organizationId, name])
  @@index([organizationId])
}


enum SurveyStatus {
  draft
  scheduled
  inProgress
  paused
  completed
}


model Form {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime        @default(now()) @map(name: "created_at")
  updatedAt           DateTime        @updatedAt @map(name: "updated_at")
  name                String
  redirectUrl         String?
  environment         Environment     @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId       String          @db.ObjectId
  creator             User?           @relation(fields: [createdBy], references: [id])
  createdBy           String?         @db.ObjectId
  status              SurveyStatus    @default(draft)
  /// @zod.custom(imports.ZSurveyWelcomeCard)
  /// [SurveyWelcomeCard]
  welcomeCard         Json                    @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZSurveyQuestions)
  /// [SurveyQuestions]
  questions           Json                    @default("[]")
  /// @zod.custom(imports.ZSurveyThankYouCard)
  /// [SurveyThankYouCard]
  thankYouCard        Json                    @default("{\"enabled\": false}")
}

model Organization {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")
  name        String
  memberships Membership[]
  products    Product[]
  /// @zod.custom(imports.ZTeamBilling)
  /// [TeamBilling]
  billing     Json
  invites     Invite[]
}

enum MembershipRole {
  owner
  admin
  editor
  developer
  viewer
}

model Membership {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String         @db.ObjectId
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.ObjectId
  accepted       Boolean        @default(false)
  role           MembershipRole

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Invite {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String
  name           String?
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String         @db.ObjectId
  creator        User           @relation("inviteCreatedBy", fields: [creatorId], references: [id])
  creatorId      String         @db.ObjectId
  acceptor       User?          @relation("inviteAcceptedBy", fields: [acceptorId], references: [id], onDelete: Cascade)
  acceptorId     String?        @db.ObjectId
  accepted       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  expiresAt      DateTime
  role           MembershipRole @default(admin)

  @@index([email, organizationId])
  @@index([organizationId])
}